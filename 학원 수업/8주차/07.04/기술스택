@ 기술 스택

@ java 버전 관리 (패스 저장, jbm 돌아가는 방식)
>JAVA 17버전과(jdk) 11버전(jre)은 두 가지로 버전 관리하면서 프로토 타입으로 17버전을 사용하여 개발
; >JVM 구조를 이해하고 코드 튜닝에 대한 깊은 관심을 갖고 공부
8버전, 11버전, 17버전, 18버전
-JAVA_HOME 변수로 여러 버전의 java를 관리
-jvm = 실무진 합격은 했으나, 연봉 협상할 때 어필. jvm(자바 코드를 바이트 코드로 변환)
jvm을 돌아가는 방식 어필 (컴파일과 스택에 대해 이해)
(자바 바이트 코드르 명령어 단위로 읽어서 해석 + JIT 캐시 저장+ GC 모듈)

@ 메모리와 기본 타입, 참조 타입 (상수풀, stringbuffer...)
>아키텍처 : 프로그래밍의 설계 (집으로 따지면 기본 골조)
>프로젝트를 기획 단계에서 아키텍처에 대한 고민을 통한 메모리 설계를 중점으로 개발
; >메모리와 연산 속도에 대한 고민으로 프로젝트 -- 개발

-기본 타입과 참조 타입의 메모리 할당 고려한 아키텍처 설계
-string 수정이 빈번할 경우 stringbuffer 사용
@클래스와 객체형변환
; >하나의 클래스를 효율적으로 사용하기 위해 객체지향 상속에 -- 
>새로 배운 객체지향 기술을 응용하여 기존 클래스의 코드 지속적 리팩토링(ex) 인터페이스를 활용한 모듈

@상속, 추상클래스, 인터페이스
; >인터페이스의 구조 설계를 통해 솔루션의 명시적 방향을 제시
> 솔루션의 기능적 유지 보수를 위해 인터페이스 활용 (로그인 정보, 유저 정보 조회)
-- 프로젝트 > 인터페이스를 구체적으로 어떤 내용의 솔루션 설계를 제시하는가?
- 자식 클래스에서만 구현 가능한 추상클래스 (형변환으로 부모 클래스로 변환 가능)
- 인터페이스를 통한 강제성과 다중 상속 (인터페이스를 통해 강제성 어필)
